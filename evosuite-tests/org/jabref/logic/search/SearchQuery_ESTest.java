/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 01 15:08:43 GMT 2021
 */

package org.jabref.logic.search;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jabref.logic.search.SearchQuery;
import org.jabref.model.entry.BibEntry;
import org.jabref.model.search.rules.ContainBasedSearchRule;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SearchQuery_ESTest extends SearchQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SearchQuery searchQuery0 = new SearchQuery("", true, true);
      boolean boolean0 = searchQuery0.isRegularExpression();
      assertTrue(searchQuery0.isCaseSensitive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SearchQuery searchQuery0 = new SearchQuery("", true, false);
      boolean boolean0 = searchQuery0.isCaseSensitive();
      assertTrue(boolean0);
      assertFalse(searchQuery0.isRegularExpression());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SearchQuery searchQuery0 = new SearchQuery("", true, false);
      List<String> list0 = searchQuery0.getSearchWords();
      assertFalse(list0.contains(""));
      assertTrue(searchQuery0.isCaseSensitive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SearchQuery searchQuery0 = new SearchQuery("", true, false);
      searchQuery0.getQuery();
      assertFalse(searchQuery0.isRegularExpression());
      assertTrue(searchQuery0.isCaseSensitive());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SearchQuery searchQuery0 = null;
      try {
        searchQuery0 = new SearchQuery((String) null, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SearchQuery searchQuery0 = null;
      try {
        searchQuery0 = new SearchQuery("#t", true, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/antlr/v4/runtime/CharStream
         //
         verifyException("org.jabref.model.search.rules.SearchRules", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SearchQuery searchQuery0 = new SearchQuery("q", false, false);
      searchQuery0.getSearchWords();
      assertFalse(searchQuery0.isCaseSensitive());
      assertFalse(searchQuery0.isRegularExpression());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SearchQuery searchQuery0 = new SearchQuery("es", true, true);
      searchQuery0.getSearchWords();
      assertTrue(searchQuery0.isRegularExpression());
      assertTrue(searchQuery0.isCaseSensitive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SearchQuery searchQuery0 = new SearchQuery("q", false, false);
      searchQuery0.getQuery();
      assertFalse(searchQuery0.isCaseSensitive());
      assertFalse(searchQuery0.isRegularExpression());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SearchQuery searchQuery0 = new SearchQuery("q", false, false);
      boolean boolean0 = searchQuery0.isRegularExpression();
      assertFalse(boolean0);
      assertFalse(searchQuery0.isCaseSensitive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SearchQuery searchQuery0 = new SearchQuery("q", false, false);
      boolean boolean0 = searchQuery0.isCaseSensitive();
      assertFalse(searchQuery0.isRegularExpression());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SearchQuery searchQuery0 = new SearchQuery("", true, true);
      searchQuery0.getJavaScriptPatternForWords();
      assertTrue(searchQuery0.isRegularExpression());
      assertTrue(searchQuery0.isCaseSensitive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SearchQuery searchQuery0 = new SearchQuery("", false, false);
      searchQuery0.getJavaScriptPatternForWords();
      assertFalse(searchQuery0.isCaseSensitive());
      assertFalse(searchQuery0.isRegularExpression());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SearchQuery searchQuery0 = new SearchQuery("q", false, false);
      String string0 = searchQuery0.localize();
      assertEquals("\"q\" (case insensitive, plain text)", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SearchQuery searchQuery0 = new SearchQuery("q", false, false);
      String string0 = searchQuery0.toString();
      assertEquals("\"q\" (case insensitive, plain text)", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SearchQuery searchQuery0 = new SearchQuery("pt", false, false);
      searchQuery0.getJavaScriptPatternForWords();
      assertFalse(searchQuery0.isRegularExpression());
      assertFalse(searchQuery0.isCaseSensitive());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SearchQuery searchQuery0 = new SearchQuery("", true, true);
      searchQuery0.isValid();
      assertTrue(searchQuery0.isCaseSensitive());
      assertTrue(searchQuery0.isRegularExpression());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SearchQuery searchQuery0 = new SearchQuery("JAVASCRIPT", true, true);
      String string0 = searchQuery0.toString();
      assertEquals("\"JAVASCRIPT\" (case sensitive, regular expression)", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SearchQuery searchQuery0 = new SearchQuery("JAVASCRIPT", true, true);
      // Undeclared exception!
      try { 
        searchQuery0.isMatch((BibEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"org.jabref.model.entry.BibEntry.getFields()\" because \"bibEntry\" is null
         //
         verifyException("org.jabref.model.search.rules.ContainBasedSearchRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SearchQuery searchQuery0 = new SearchQuery("", true, true);
      String string0 = searchQuery0.localize();
      assertEquals("\"\" (case sensitive, regular expression)", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SearchQuery searchQuery0 = new SearchQuery("", true, true);
      searchQuery0.isGrammarBasedSearch();
      assertTrue(searchQuery0.isRegularExpression());
      assertTrue(searchQuery0.isCaseSensitive());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SearchQuery searchQuery0 = new SearchQuery("", true, true);
      searchQuery0.isContainsBasedSearch();
      assertTrue(searchQuery0.isCaseSensitive());
      assertTrue(searchQuery0.isRegularExpression());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SearchQuery searchQuery0 = new SearchQuery("q", true, true);
      searchQuery0.getJavaScriptPatternForWords();
      assertTrue(searchQuery0.isCaseSensitive());
      assertTrue(searchQuery0.isRegularExpression());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SearchQuery searchQuery0 = new SearchQuery("", true, true);
      ContainBasedSearchRule containBasedSearchRule0 = (ContainBasedSearchRule)searchQuery0.getRule();
      assertTrue(containBasedSearchRule0.isCaseSensitive());
      assertTrue(searchQuery0.isRegularExpression());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SearchQuery searchQuery0 = new SearchQuery("q", false, false);
      searchQuery0.getPatternForWords();
      assertFalse(searchQuery0.isRegularExpression());
      assertFalse(searchQuery0.isCaseSensitive());
  }
}
