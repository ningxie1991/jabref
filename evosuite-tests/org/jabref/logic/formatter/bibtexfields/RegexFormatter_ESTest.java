/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 01 15:13:14 GMT 2021
 */

package org.jabref.logic.formatter.bibtexfields;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jabref.logic.formatter.bibtexfields.RegexFormatter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RegexFormatter_ESTest extends RegexFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RegexFormatter regexFormatter0 = new RegexFormatter("~$F~#tvd7(%h#33");
      String string0 = regexFormatter0.format("~$F~#tvd7(%h#33");
      assertEquals("~$F~#tvd7(%h#33", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RegexFormatter regexFormatter0 = new RegexFormatter("");
      // Undeclared exception!
      try { 
        regexFormatter0.format((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RegexFormatter regexFormatter0 = null;
      try {
        regexFormatter0 = new RegexFormatter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RegexFormatter regexFormatter0 = new RegexFormatter("regular expression");
      String string0 = regexFormatter0.format("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RegexFormatter regexFormatter0 = null;
      try {
        regexFormatter0 = new RegexFormatter("((?<regex>.*),(?<replacement>.*))");
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match found
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RegexFormatter regexFormatter0 = new RegexFormatter("regular expression");
      String string0 = regexFormatter0.getDescription();
      assertEquals("Add a regular expression for the key pattern.", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RegexFormatter regexFormatter0 = new RegexFormatter("regular expression");
      String string0 = regexFormatter0.getExampleInput();
      assertEquals("Please replace the spaces", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RegexFormatter regexFormatter0 = new RegexFormatter("regular expression");
      String string0 = regexFormatter0.getKey();
      assertEquals("regex", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      RegexFormatter regexFormatter0 = new RegexFormatter("regular expression");
      String string0 = regexFormatter0.getName();
      assertEquals("regular expression", string0);
  }
}
