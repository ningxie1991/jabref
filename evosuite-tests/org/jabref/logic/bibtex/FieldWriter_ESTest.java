/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 01 15:06:38 GMT 2021
 */

package org.jabref.logic.bibtex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jabref.logic.bibtex.FieldContentFormatterPreferences;
import org.jabref.logic.bibtex.FieldWriter;
import org.jabref.logic.bibtex.FieldWriterPreferences;
import org.jabref.model.entry.field.Field;
import org.jabref.model.entry.field.IEEEField;
import org.jabref.model.entry.field.InternalField;
import org.jabref.model.entry.field.StandardField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FieldWriterPreferences fieldWriterPreferences0 = new FieldWriterPreferences();
      FieldWriter fieldWriter0 = new FieldWriter(fieldWriterPreferences0);
      StandardField standardField0 = StandardField.INTRODUCEDIN;
      try { 
        fieldWriter0.write(standardField0, "Unescaped '}' character without opening bracket ends string prematurely. Field value: {}");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Braces don't match. Field value: Unescaped '}' character without opening bracket ends string prematurely. Field value: {}
         //
         verifyException("org.jabref.logic.bibtex.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FieldContentFormatterPreferences fieldContentFormatterPreferences0 = new FieldContentFormatterPreferences();
      FieldWriterPreferences fieldWriterPreferences0 = new FieldWriterPreferences(true, (List<Field>) null, fieldContentFormatterPreferences0);
      FieldWriter fieldWriter0 = new FieldWriter(fieldWriterPreferences0);
      StandardField standardField0 = StandardField.BOOKSUBTITLE;
      // Undeclared exception!
      try { 
        fieldWriter0.write(standardField0, "The # character is not allowed in BibTeX strings unless escaped as in '#'. In JabRef, use pairs of # characters to indicate a string. Note that the entry causing the problem has been selected. Field value: {}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldWriter.buildIgnoreHashes((FieldWriterPreferences) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"org.jabref.logic.bibtex.FieldWriterPreferences.getFieldContentFormatterPreferences()\" because \"preferences\" is null
         //
         verifyException("org.jabref.logic.bibtex.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter((FieldWriterPreferences) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"org.jabref.logic.bibtex.FieldWriterPreferences.getFieldContentFormatterPreferences()\" because \"preferences\" is null
         //
         verifyException("org.jabref.logic.bibtex.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FieldWriterPreferences fieldWriterPreferences0 = new FieldWriterPreferences();
      StandardField standardField0 = StandardField.MAINTITLEADDON;
      FieldWriter fieldWriter0 = FieldWriter.buildIgnoreHashes(fieldWriterPreferences0);
      String string0 = fieldWriter0.write(standardField0, "DE8`o^%nk19R].9M");
      assertEquals("{DE8`o^%nk19R].9M}", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StandardField standardField0 = StandardField.EDITORCTYPE;
      List<Field> list0 = List.of();
      FieldContentFormatterPreferences fieldContentFormatterPreferences0 = new FieldContentFormatterPreferences(list0);
      FieldWriterPreferences fieldWriterPreferences0 = new FieldWriterPreferences(false, list0, fieldContentFormatterPreferences0);
      FieldWriter fieldWriter0 = FieldWriter.buildIgnoreHashes(fieldWriterPreferences0);
      String string0 = fieldWriter0.write(standardField0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IEEEField iEEEField0 = IEEEField.CTLALT_STRETCH_FACTOR;
      List<Field> list0 = List.of((Field) iEEEField0, (Field) iEEEField0, (Field) iEEEField0, (Field) iEEEField0, (Field) iEEEField0);
      FieldContentFormatterPreferences fieldContentFormatterPreferences0 = new FieldContentFormatterPreferences();
      FieldWriterPreferences fieldWriterPreferences0 = new FieldWriterPreferences(true, list0, fieldContentFormatterPreferences0);
      FieldWriter fieldWriter0 = FieldWriter.buildIgnoreHashes(fieldWriterPreferences0);
      String string0 = fieldWriter0.write(iEEEField0, "wm+F`#14Bt/`5KO!k)");
      assertEquals("{wm+F`#14Bt/`5KO!k)}", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FieldWriterPreferences fieldWriterPreferences0 = new FieldWriterPreferences();
      FieldWriter fieldWriter0 = FieldWriter.buildIgnoreHashes(fieldWriterPreferences0);
      StandardField standardField0 = StandardField.PAGES;
      // Undeclared exception!
      try { 
        fieldWriter0.write(standardField0, "xq^d'0x_7SSH#*b$`#");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/CharMatcher
         //
         verifyException("org.jabref.model.strings.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FieldWriterPreferences fieldWriterPreferences0 = new FieldWriterPreferences();
      FieldWriter fieldWriter0 = new FieldWriter(fieldWriterPreferences0);
      StandardField standardField0 = StandardField.URLDATE;
      // Undeclared exception!
      try { 
        fieldWriter0.write(standardField0, "#&v<oAf5#y");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/CharMatcher
         //
         verifyException("org.jabref.model.strings.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FieldWriterPreferences fieldWriterPreferences0 = new FieldWriterPreferences();
      StandardField standardField0 = StandardField.HALVERSION;
      FieldWriter fieldWriter0 = FieldWriter.buildIgnoreHashes(fieldWriterPreferences0);
      // Undeclared exception!
      try { 
        fieldWriter0.write(standardField0, "The  character is no allowed in BibTeX strings unless escaped as in '#'. In JabRef, us pair of # characters to indicate a string. Note that the entry causing the problem has been selected. Field value: {}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/CharMatcher
         //
         verifyException("org.jabref.model.strings.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FieldWriterPreferences fieldWriterPreferences0 = new FieldWriterPreferences();
      FieldWriter fieldWriter0 = FieldWriter.buildIgnoreHashes(fieldWriterPreferences0);
      StandardField standardField0 = StandardField.EDITORCTYPE;
      String string0 = fieldWriter0.write(standardField0, " # ");
      assertEquals("{ # }", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FieldWriterPreferences fieldWriterPreferences0 = new FieldWriterPreferences();
      StandardField standardField0 = StandardField.MAINTITLEADDON;
      FieldWriter fieldWriter0 = FieldWriter.buildIgnoreHashes(fieldWriterPreferences0);
      String string0 = fieldWriter0.write(standardField0, (String) null);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FieldWriterPreferences fieldWriterPreferences0 = new FieldWriterPreferences();
      FieldWriter fieldWriter0 = FieldWriter.buildIgnoreHashes(fieldWriterPreferences0);
      StandardField standardField0 = StandardField.URLDATE;
      try { 
        fieldWriter0.write(standardField0, "/T,q{AGg");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Braces don't match. Field value: /T,q{AGg
         //
         verifyException("org.jabref.logic.bibtex.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FieldWriterPreferences fieldWriterPreferences0 = new FieldWriterPreferences();
      FieldWriter fieldWriter0 = new FieldWriter(fieldWriterPreferences0);
      StandardField standardField0 = StandardField.BOOKPAGINATION;
      try { 
        fieldWriter0.write(standardField0, "}>3#0{#bX|m{Rd`v+|G");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unescaped '}' character without opening bracket ends string prematurely. Field value: }>3#0{#bX|m{Rd`v+|G
         //
         verifyException("org.jabref.logic.bibtex.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FieldWriterPreferences fieldWriterPreferences0 = new FieldWriterPreferences();
      FieldWriter fieldWriter0 = FieldWriter.buildIgnoreHashes(fieldWriterPreferences0);
      StandardField standardField0 = StandardField.EDITORCTYPE;
      try { 
        fieldWriter0.write(standardField0, "Oda_9^_q-Y}u60N;o[");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unescaped '}' character without opening bracket ends string prematurely. Field value: Oda_9^_q-Y}u60N;o[
         //
         verifyException("org.jabref.logic.bibtex.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IEEEField iEEEField0 = IEEEField.CTLNAME_FORMAT_STRING;
      FieldContentFormatterPreferences fieldContentFormatterPreferences0 = new FieldContentFormatterPreferences();
      List<Field> list0 = fieldContentFormatterPreferences0.getNonWrappableFields();
      FieldWriterPreferences fieldWriterPreferences0 = new FieldWriterPreferences(false, list0, fieldContentFormatterPreferences0);
      FieldWriter fieldWriter0 = new FieldWriter(fieldWriterPreferences0);
      String string0 = fieldWriter0.write(iEEEField0, "");
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FieldContentFormatterPreferences fieldContentFormatterPreferences0 = new FieldContentFormatterPreferences();
      List<Field> list0 = fieldContentFormatterPreferences0.getNonWrappableFields();
      FieldWriterPreferences fieldWriterPreferences0 = new FieldWriterPreferences(false, list0, fieldContentFormatterPreferences0);
      FieldWriter fieldWriter0 = new FieldWriter(fieldWriterPreferences0);
      InternalField internalField0 = InternalField.BIBTEX_STRING;
      // Undeclared exception!
      try { 
        fieldWriter0.write(internalField0, "{}>3#0{#bX|msRd`v+rG}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/CharMatcher
         //
         verifyException("org.jabref.model.strings.StringUtil", e);
      }
  }
}
